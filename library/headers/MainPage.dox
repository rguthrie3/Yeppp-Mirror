/**

@mainpage Yeppp! library documentation for C programmers

@section Introduction	Introduction

Yeppp! is a high-performance SIMD-optimized mathematical library for x86, ARM, PowerPC, and MIPS processors on Windows, Android, Mac OS X, and GNU/Linux systems.
Yeppp! functions are presented in several versions with optimizations for different processor microarchitectures.
During initialization @Yeppp library detects the processor it is running on, and chooses the optimal function implementations.

Additionally, the library provides information about the CPU, such as processor vendor and microarchitecture,
and an OS- and hardware-independent interface to processor cycle counters, and high-resolution timers.

@section FileStructure	File structure

Releases of @Yeppp library contain the following files relevant to C/C++ programming:

<table>
	<tr><th>Location</th><th>Description</th></tr>
	<tr><td>binaries/windows/amd64/</td><td>Pre-built @Yeppp DLL, import library, and debug information files for x64 (64-bit) Windows</td></tr>
	<tr><td>binaries/windows/x86/</td><td>Pre-built @Yeppp DLL, import library, and debug information files for x86 (32-bit) Windows</td></tr>
	<tr><td>binaries/android/armeabi/</td><td>Pre-built @Yeppp shared object and debug symbols for Android ("armeabi" ABI)</td></tr>
	<tr><td>binaries/android/armeabi-v7a/</td><td>Pre-built @Yeppp shared object and debug symbols for Android ("armeabi-v7a" ABI)</td></tr>
	<tr><td>binaries/android/x86/</td><td>Pre-built @Yeppp shared object and debug symbols for Android ("x86" ABI)</td></tr>
	<tr><td>binaries/android/mips/</td><td>Pre-built @Yeppp shared object and debug symbols for Android ("mips" ABI)</td></tr>
	<tr><td>binaries/android/yeppp/Android.mk</td><td>Description of @Yeppp library as an import module for Android NDK</td></tr>
	<tr><td>binaries/linux/i586/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on x86 architecture</td></tr>
	<tr><td>binaries/linux/x86_64/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on x86-64 (aka AMD64, x64, or Intel64) architecture</td></tr>
	<tr><td>binaries/linux/k1om/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on k1om (Xeon Phi) architecture</td></tr>
	<tr><td>binaries/linux/armel/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on ARM architecture with armel ABI (ARM EABI Little-Endian Soft-Float)</td></tr>
	<tr><td>binaries/linux/armhf/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on ARM architecture with armhf ABI (ARM EABI Little-Endian Hard-Float)</td></tr>
	<tr><td>binaries/linux/ppc64/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on PowerPC 64 architecture</td></tr>
	<tr><td>binaries/linux/bgq/</td><td>Pre-built @Yeppp shared object and debug symbols for Blue Gene/Q compute nodes</td></tr>
	<tr><td>binaries/macosx/x86/</td><td>Pre-built @Yeppp dynamic library and debug symbols for Mac OS X on x86 architecture</td></tr>
	<tr><td>binaries/macosx/x86_64/</td><td>Pre-built @Yeppp dynamic library and debug symbols for Mac OS X on x86-64 (aka AMD64, x64, or Intel64) architecture</td></tr>
	<tr><td>library/headers/</td><td>@Yeppp headers for C and C++ compilers</td></tr>
	<tr><td>library/sources/</td><td>@Yeppp source code</td></tr>
	<tr><td>examples/c/</td><td>Examples of calling @Yeppp functions in C code</td></tr>
	<tr><td>docs/c/</td><td>@Yeppp documentation for C and C++ programmers</td></tr>
	<tr><td>SetVars.cmd</td><td>Windows batch script to setup environment variables for @Yeppp</td></tr>
	<tr><td>set-vars.sh</td><td>POSIX shell script to setup environemnt variables for @Yeppp. Compatible with bash/dash/ksh/zsh on Linux and Mac OS X.</td></tr>
</table>

@section GettingStarted	Getting Started

@subsection GettingStartedVisualStudio	Using Yeppp! with Visual Studio

Download the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>. On Windows we recommend that you use the MSI installer for Yeppp! SDK. The installer will install the library components, and also set YEPROOT environment variable.

Open the Visual C++ project where you want to use @Yeppp. Choose Project->Properties in the main menu. A project properties window will appear on the screen.

Choose "All configurations" and "All platforms" in the combo boxes on the top of the window. @image html visual-studio-all-configs-all-platforms.png

Expand the "C/C++" option group, and open "General" subgroup of options. Add <tt>\$(YEPROOT)\\library\\headers</tt> to Additional Include Directories list. This will tell the compiler where it can find the header files for @Yeppp library. The \$(YEPROOT) environment variable specifies the directory where @Yeppp SDK is installed. This variable is set by @Yeppp SDK installer. @image html visual-studio-compiler-options-general.png

Similarly, expand the "Linker" option group, and open "General" subgroup of options. Add <tt>\$(YEPROOT)\\binaries\\windows\\$(PlatformShortName)</tt> to Additional Library Directories list, so the linker will know where to search for @Yeppp import library (yeppp.lib). The path will expand to <tt>\$(YEPROOT)\\binaries\\windows\\x86</tt> for 32-bit (x86) builds, and to <tt>\$(YEPROOT)\\binaries\\windows\\amd64</tt> when targeting 64-bit (x64 AKA amd64) platform. @image html visual-studio-linker-options-general.png

Now switch to "Input" subgroup of Linker options. Add <tt>yeppp.lib</tt> to Additional Dependencies list. This file provides the linker with information about the functions in @Yeppp library. @image html visual-studio-linker-options-input.png

Finally, you need to let Windows know where to find @Yeppp DLL. The easy way to achieve it is to copy yeppp.dll (which should match your target platform) to your output directory.

Now you are ready to use @Yeppp

@subsection GettingStartedWindowsTerminal	Using Yeppp! with command-line tools on Windows

Download the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>. On Windows we recommend that you use the MSI installer for Yeppp! SDK. The installer will install the library components, and also set YEPROOT environment variable.

Open the Visual Studio Command Prompt for your target platform (x86 or x64). With @Yeppp we provide a shell script to set up environment variables. In the Visual Studio Command Prompt execute the command
\code{.batch}
"%YEPROOT%\SetVars.bat" <arch>
\endcode
where <tt>&lt;arch&gt;</tt> specifies the architecture for which you want to compile your program. The following values are accepted:
<ul>
	<li>\c x86 to set variables for x86 (32-bit x86) target</li>
	<li>\c x64 to set variables for x86-64 (64-bit x86 aka AMD64 aka x64) target</li>
</ul>
You can also omit the &lt;arch&gt; parameter. This case the setup script will auto-detect the OS architecture and set the environment variable accordingly.

The SetVars.bat script modifies environment variables INCLUDE and LIB which tell the compilers where to search for @Yeppp headers and import library. It also sets environment variables to let the system find @Yeppp when you execute a program which makes use of this library.

Now just add <tt>yeppp.lib</tt> option when linking your program, e.g.
	\code{.batch}
	link /OUT:HelloWorld.exe HelloWorld.obj yeppp.lib
	\endcode
and you are ready to use @Yeppp in your codes!

@subsection GettingStartedWindowsAndroidNDK	Using Yeppp! with Android NDK on Windows

Download the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>. On Windows we recommend that you use the MSI installer for Yeppp! SDK. Make sure that you mark "Android NDK Integration" feature for installation, and that the <b>installation directory does not contain any spaces</b>. The installer will install the library components, and also set YEPROOT environment variable.

@Yeppp integrates with Android NDK as an import module. To enable @Yeppp in your Android NDK project, first open the Android.mk in a text editor. Add \c yeppp to the list of required shared libraries:
\code{.makefile}
LOCAL_SHARED_LIBRARIES += yeppp
\endcode
In the end of Android.mk file add the line
\code{.makefile}
$(call import-module,yeppp)
\endcode
(note that there is no space before <tt>yeppp</tt>).

Now open a Command Prompt window and execute command
\code{.batch}
"%YEPROOT%\SetVars.bat"
\endcode
(you may still specify the &lt;arch&gt; parameter as described in the previous section, but it is not necessary for building Android programs).

The SetVars.bat script adjusts environment variable NDK_MODULE_PATH which is used by Android NDK build system to find import module desciptions.

Now you can use this Command Prompt window to build your @Yeppp-powered Android NDK projects via the standard ndk-build script.

@subsection GettingStartedUnixTerminal	Using Yeppp! with command-line tools on Linux and Mac OS X

Download and unpack the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>.

Open a terminal window where you plan to build your program. With @Yeppp we provide a shell script to set up environment variables. Navigate to @Yeppp directory and execute command
\code{.bash}
source set-vars.sh <arch>
\endcode
If your shell does not support \c source command, use the equivalent command
\code{.bash}
. set-vars.sh <arch>
\endcode
<tt>&lt;arch&gt;</tt> specifies the architecture/ABI for which you want to compile your program. The following values are accepted:
<ul>
	<li>\c x86 to set variables for x86 (32-bit x86) target</li>
	<li>\c x86_64 to set variables for x86-64 (64-bit x86) target</li>
	<li>\c k1om to set variables for Xeon Phi target (Linux only)</li>
	<li>\c armel to set variables for ARM Soft-Float EABI target (Linux only)</li>
	<li>\c armhf to set variables for ARM Hard-Float EABI target (Linux only)</li>
	<li>\c ppc64 to set variables for PowerPC 64 target (Linux only)</li>
	<li>\c bgq to set variables for Blue Gene/Q target (Linux only)</li>
</ul>
You can also omit the &lt;arch&gt; parameter. This case the setup script will auto-detect the host architecture and set the environment variable accordingly.

The set-vars.sh script modifies environment variables CPATH and LIBRARY_PATH which tell the compilers where to search for @Yeppp headers and binaries. However, when doing cross-compilation the linker ignores LIBRARY_PATH variable, so you will need to manually specify the search directory for Yeppp! binaries by adding -L$(YEPBINARIES) to LDFLAGS. It also sets environment variables to let the dynamic linker find @Yeppp when you execute a program which makes use of this library.

Now just add <tt>-lyeppp</tt> option when linking your program, e.g.
	\code{.bash}
	gcc HelloWorld.o -o HelloWorld -lyeppp
	\endcode
and you can use @Yeppp in your codes!

@subsection GettingStartedUnixAndroidNDK	Using Yeppp! with Android NDK on Linux and Mac OS X

Download and unpack the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>.

@Yeppp integrates with Android NDK as an import module. To enable @Yeppp in your Android NDK project, open the Android.mk in a text editor and add \c yeppp to the list of required shared libraries:
\code{.makefile}
LOCAL_SHARED_LIBRARIES += yeppp
\endcode
In the end of Android.mk file add the line
\code{.makefile}
$(call import-module,yeppp)
\endcode
(note that there is no space before <tt>yeppp</tt>).

Open a terminal window where you plan to build your program and execute command
\code{.bash}
source set-vars.sh <arch>
\endcode
If your shell does not support \c source command, use the equivalent command
\code{.bash}
. ./set-vars.sh <arch>
\endcode
(you may still specify the &lt;arch&gt; parameter as described in the previous section, but it is not necessary for building Android programs).

The set-vars.sh script adjusts environment variable NDK_MODULE_PATH which is used by Android NDK build system to find import module desciptions.

Now you can use this terminal window to build your @Yeppp-powered Android NDK projects via the standard ndk-build script.

@example Entropy.c
This example shows how to use @Yeppp library to compute the entropy of a distribution given by its probabilities:

@example Polynomial.c
This example demonstrates the use of @Yeppp library to evaluate a polynomial on an array:

@example CpuInfo.c
This example shows how to use @Yeppp library to get information about processor and supported instruction extensions:

@example SystemTimer.c
This example shows how to use @Yeppp library to do cross-platform measurements of execution time using high-frequency system timer:

@example CpuCycles.c
This example shows how to use @Yeppp library to measure the execution time in CPU cycles:

@example CompileTimeInfo.c
This example shows how to use predefined macros from @Yeppp headers to get compile-time information about the system:

*/
