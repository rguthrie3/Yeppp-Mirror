/*
 *                      Yeppp! library implementation
 *
 * This file is part of Yeppp! library and licensed under the New BSD license.
 * See LICENSE.txt for the full text of the license.
 */

#pragma once

/** @defgroup yepPredefines	yepPredefines.h: predefined macros.
 *  @note	This module can be used from C, C++, or CUDA.
 */

/** @name	Compiler Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Microsoft C/C++ compiler (cl.exe) is used for compilation.
 */
#define YEP_MICROSOFT_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when GNU C/C++ compiler (gcc/g++) is used for compilation.
 */
#define YEP_GNU_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Clang compiler (clang/clang++) is used for compilation.
 */
#define YEP_CLANG_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Borland/Codegear/Embarcadero compiler (bcc) is used for compilation.
 */
#define YEP_EMBARCADERO_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Intel C/C++ compiler is used for compilation.
 */
#define YEP_INTEL_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Intel C/C++ compiler for Windows (icl.exe) is used for compilation.
 */
#define YEP_INTEL_COMPILER_FOR_WINDOWS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Intel C/C++ compiler for Linux or Mac OS X (icc/icpc) is used for compilation.
 */
#define YEP_INTEL_COMPILER_FOR_UNIX
/**
 * @ingroup yepPredefines
 * @brief	Defined only when ARM compiler (armcc) is used for compilation.
 */
#define YEP_ARM_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when IBM compiler (xlc) is used for compilation.
 */
#define YEP_IBM_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when PGI compiler (pgcc) is used for compilation.
 */
#define YEP_PGI_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when PathScale compiler (pathcc) is used for compilation.
 */
#define YEP_PATHSCALE_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when nVidia CUDA compiler (nvcc) is used for compilation of GPU-specific code.
 */
#define YEP_NVIDIA_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when Visual Studio-compatible compiler is used for compilation.
 * @details	Visual Studio-compatible compilers currently include only Microsoft C/C++ compiler and Intel C/C++ compiler for Windows.
 */
#define YEP_MSVC_COMPATIBLE_COMPILER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when GCC-compatible compiler is used for compilation.
 * @details	GCC-compatible compilers currently include only GNU C/C++ compiler, Clang compiler and Intel C/C++ compiler for Linux and Mac OS X.
 */
#define YEP_GCC_COMPATIBLE_COMPILER
/**@}*/

/** @name	Target OS Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target operating system is Microsoft Windows.
 */
#define YEP_WINDOWS_OS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target operating system is Apple Mac OS X.
 */
#define YEP_MACOSX_OS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target operating system is based on Linux kernel.
 * @see	YEP_GNU_LINUX_OS, YEP_ANDROID_LINUX_OS
 */
#define YEP_LINUX_OS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target operating system is Linux with GNU userland.
 */
#define YEP_GNU_LINUX_OS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target operating system is Linux with Android userland.
 */
#define YEP_ANDROID_LINUX_OS
/**@}*/

/** @name	Target Object Format */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target object format is COFF (Common Object File Format).
 */
#define YEP_COFF_OBJECT_FORMAT
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target object format is ELF (Executable and Linkable Format).
 */
#define YEP_ELF_OBJECT_FORMAT
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target object format is Mach-O (Mach Object).
 */
#define YEP_MACH_OBJECT_FORMAT
/**@}*/

/** @name	Target Architecture Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is x86 or x86-64.
 * @see	#YepCpuArchitectureX86
 */
#define YEP_X86_CPU
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is IA64.
 * @see	#YepCpuArchitectureIA64
 */
#define YEP_IA64_CPU
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is ARM.
 * @see	#YepCpuArchitectureARM
 */
#define YEP_ARM_CPU
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is MIPS.
 * @see	#YepCpuArchitectureMIPS
 */
#define YEP_MIPS_CPU
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is SPARC.
 * @see	#YepCpuArchitectureSPARC
 */
#define YEP_SPARC_CPU
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is PowerPC.
 * @see	#YepCpuArchitecturePowerPC
 */
#define YEP_POWERPC_CPU
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target architecture is a CUDA-enabled GPU.
 */
#define YEP_CUDA_GPU
/**@}*/

/** @name	Target ABI Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI byte order is little endian.
 */
#define YEP_LITTLE_ENDIAN_BYTE_ORDER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI byte order is big endian.
 */
#define YEP_BIG_ENDIAN_BYTE_ORDER
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is x86 ABI.
 */
#define YEP_X86_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is x86-64 ABI.
 * @see	YEP_MICROSOFT_X64_ABI, YEP_SYSTEMV_X64_ABI, YEP_K1OM_X64_ABI
 */
#define YEP_X64_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is Microsoft x86-64 ABI.
 * @details
 *	<table>
 *		<tr><td>1st argument</td><td>rcx/xmm0</td></tr>
 *		<tr><td>2nd argument</td><td>rdx/xmm1</td></tr>
 *		<tr><td>3rd argument</td><td>r8/xmm2</td></tr>
 *		<tr><td>4th argument</td><td>r9/xmm3</td></tr>
 *		<tr><td>Return value</td><td>rax/xmm0</td></tr>
 *		<tr><td>Volatile registers (general-purpose)</td><td>rax, rcx, rdx, r8, r9, r10, r11</td></tr>
 *		<tr><td>Volatile registers (MMX)</td><td>mm0-mm7</td></tr>
 *		<tr><td>Volatile registers (SSE)</td><td>xmm0-xmm5</td></tr>
 *		<tr><td>Non-volatile registers (general-purpose)</td><td>rbx, rbp, rdi, rsi, r12, r13, r14, r15</td></tr>
 *	</table>
 */
#define YEP_MICROSOFT_X64_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is System V x86-64 ABI.
 * @details
 *	<table>
 *		<tr><td>1st integer argument</td><td>rdi</td></tr>
 *		<tr><td>2nd integer argument</td><td>rsi</td></tr>
 *		<tr><td>3rd integer argument</td><td>rdx</td></tr>
 *		<tr><td>4th integer argument</td><td>rcx</td></tr>
 *		<tr><td>5th integer argument</td><td>r8</td></tr>
 *		<tr><td>6th integer argument</td><td>r9</td></tr>
 *		<tr><td>1st FP argument</td><td>xmm0</td></tr>
 *		<tr><td>2nd FP argument</td><td>xmm1</td></tr>
 *		<tr><td>3rd FP argument</td><td>xmm2</td></tr>
 *		<tr><td>4th FP argument</td><td>xmm3</td></tr>
 *		<tr><td>5th FP argument</td><td>xmm4</td></tr>
 *		<tr><td>6th FP argument</td><td>xmm5</td></tr>
 *		<tr><td>7th FP argument</td><td>xmm6</td></tr>
 *		<tr><td>8th FP argument</td><td>xmm7</td></tr>
 *		<tr><td>Return value</td><td>rax/xmm0</td></tr>
 *		<tr><td>Volatile registers (general-purpose)</td><td>rax, rcx, rdx, r8, r9, r10, r11</td></tr>
 *		<tr><td>Volatile registers (MMX)</td><td>mm0-mm7</td></tr>
 *		<tr><td>Volatile registers (SSE)</td><td>xmm0-xmm15</td></tr>
 *		<tr><td>Non-volatile registers (general-purpose)</td><td>rbx, rbp, r12, r13, r14, r15</td></tr>
 *	</table>
 */
#define YEP_SYSTEMV_X64_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is Xeon Phi ABI.
 * @details
 *	<table>
 *		<tr><td>1st integer argument</td><td>rdi</td></tr>
 *		<tr><td>2nd integer argument</td><td>rsi</td></tr>
 *		<tr><td>3rd integer argument</td><td>rdx</td></tr>
 *		<tr><td>4th integer argument</td><td>rcx</td></tr>
 *		<tr><td>5th integer argument</td><td>r8</td></tr>
 *		<tr><td>6th integer argument</td><td>r9</td></tr>
 *		<tr><td>1st FP argument</td><td>zmm0</td></tr>
 *		<tr><td>2nd FP argument</td><td>zmm1</td></tr>
 *		<tr><td>3rd FP argument</td><td>zmm2</td></tr>
 *		<tr><td>4th FP argument</td><td>zmm3</td></tr>
 *		<tr><td>5th FP argument</td><td>zmm4</td></tr>
 *		<tr><td>6th FP argument</td><td>zmm5</td></tr>
 *		<tr><td>7th FP argument</td><td>zmm6</td></tr>
 *		<tr><td>8th FP argument</td><td>zmm7</td></tr>
 *		<tr><td>Return value</td><td>rax/zmm0</td></tr>
 *		<tr><td>Volatile registers (general-purpose)</td><td>rax, rcx, rdx, r8, r9, r10, r11</td></tr>
 *		<tr><td>Volatile registers (MMX)</td><td>mm0-mm7</td></tr>
 *		<tr><td>Volatile registers (SSE)</td><td>zmm0-zmm31</td></tr>
 *		<tr><td>Non-volatile registers (general-purpose)</td><td>rbx, rbp, r12, r13, r14, r15</td></tr>
 *	</table>
 */
#define YEP_K1OM_X64_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is a 32-bit ARM ABI.
 * @see	YEP_EABI_ARM_ABI, YEP_HARDEABI_ARM_ABI, YEP_SOFTEABI_ARM_ABI
 */
#define YEP_ARM_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is a variant of ARM EABI.
 * @see	YEP_HARDEABI_ARM_ABI, YEP_SOFTEABI_ARM_ABI
 */
#define YEP_EABI_ARM_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is ARM EABI with floating-point parameters passed in VFP registers.
 */
#define YEP_HARDEABI_ARM_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is ARM EABI with floating-point parameters passed in general-purpose registers.
 */
#define YEP_SOFTEABI_ARM_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is a 32-bit MIPS ABI.
 * @see	YEP_O32_MIPS_ABI, YEP_HARDO32_MIPS_ABI
 */
#define YEP_MIPS32_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is a 64-bit MIPS ABI.
 */
#define YEP_MIPS64_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is a variant of MIPS O32 ABI.
 * @see	YEP_HARDO32_MIPS_ABI
 */
#define YEP_O32_MIPS_ABI
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target ABI is MIPS O32 ABI with floating-point parameters passed in FPU registers.
 */
#define YEP_HARDO32_MIPS_ABI
/**@}*/

/** @name	Common Target ISA Feature Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor (either CPU or GPU) supports misaligned memory access.
 * @see	YepSystemFeatureMisalignedAccess
 */
#define YEP_PROCESSOR_SUPPORTS_MISALIGNED_MEMORY_ACCESS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor (either CPU or GPU) supports single-precision floating-point operations in hardware.
 */
#define YEP_PROCESSOR_SUPPORTS_SINGLE_PRECISION_FPU_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor (either CPU or GPU) supports double-precision floating-point operations in hardware.
 */
#define YEP_PROCESSOR_SUPPORTS_DOUBLE_PRECISION_FPU_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor (either CPU or GPU) supports fused multiply-add instructions in single precision.
 */
#define YEP_PROCESSOR_SUPPORTS_SINGLE_PRECISION_FMA_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor (either CPU or GPU) supports fused multiply-add instructions in double precision.
 */
#define YEP_PROCESSOR_SUPPORTS_DOUBLE_PRECISION_FMA_INSTRUCTIONS
/**@}*/

/** @name	x86/x86-64 Target ISA Feature Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 MMX instruction set.
 * @see	#YepX86SimdFeatureMMX
 */
#define YEP_PROCESSOR_SUPPORTS_X86_MMX_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 MMX+ instruction set.
 * @see	#YepX86SimdFeatureMMXPlus
 */
#define YEP_PROCESSOR_SUPPORTS_X86_MMXPLUS_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 3dnow! instruction set.
 * @see	#YepX86SimdFeature3dnow
 */
#define YEP_PROCESSOR_SUPPORTS_X86_3DNOW_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 3dnow!+ instruction set.
 * @see	#YepX86SimdFeature3dnowPlus
 */
#define YEP_PROCESSOR_SUPPORTS_X86_3DNOWPLUS_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSE instruction set.
 * @see	#YepX86SimdFeatureSSE
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSE_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSE2 instruction set.
 * @see	#YepX86SimdFeatureSSE2
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSE2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSE3 instruction set.
 * @see	#YepX86SimdFeatureSSE3
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSE3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSSE3 instruction set.
 * @see	#YepX86SimdFeatureSSSE3
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSSE3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSE4a instruction set.
 * @see	#YepX86SimdFeatureSSE4A
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSE4A_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSE4.1 instruction set.
 * @see	#YepX86SimdFeatureSSE4_1
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSE4_1_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 SSE4.2 instruction set.
 * @see	#YepX86SimdFeatureSSE4_2
 */
#define YEP_PROCESSOR_SUPPORTS_X86_SSE4_2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 AVX instruction set.
 * @see	#YepX86SimdFeatureAVX
 */
#define YEP_PROCESSOR_SUPPORTS_X86_AVX_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 AVX2 instruction set.
 * @see	#YepX86SimdFeatureAVX2
 */
#define YEP_PROCESSOR_SUPPORTS_X86_AVX2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 F16C instructions.
 * @see	#YepX86SimdFeatureF16C
 */
#define YEP_PROCESSOR_SUPPORTS_X86_F16C_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 FMA4 instruction set.
 * @see	#YepX86SimdFeatureFMA4
 */
#define YEP_PROCESSOR_SUPPORTS_X86_FMA4_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 FMA3 instruction set.
 * @see	#YepX86SimdFeatureFMA3
 */
#define YEP_PROCESSOR_SUPPORTS_X86_FMA3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 XOP instruction set.
 * @see	#YepX86SimdFeatureXOP
 */
#define YEP_PROCESSOR_SUPPORTS_X86_XOP_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 LZCNT instruction.
 * @see	#YepX86IsaFeatureLzcnt
 */
#define YEP_PROCESSOR_SUPPORTS_X86_LZCNT_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 POPCNT instruction.
 * @see	#YepX86IsaFeaturePopcnt
 */
#define YEP_PROCESSOR_SUPPORTS_X86_POPCNT_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 TBM instruction set.
 * @see	#YepX86IsaFeatureTBM
 */
#define YEP_PROCESSOR_SUPPORTS_X86_TBM_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 BMI instruction set.
 * @see	#YepX86IsaFeatureBMI
 */
#define YEP_PROCESSOR_SUPPORTS_X86_BMI_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 BMI2 instruction set.
 * @see	#YepX86IsaFeatureBMI2
 */
#define YEP_PROCESSOR_SUPPORTS_X86_BMI2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports x86/x86-64 KNC instruction set.
 * @see	#YepX86SimdFeatureKNC
 */
#define YEP_PROCESSOR_SUPPORTS_X86_KNC_EXTENSION
/**@}*/

/** @name	ARM Target ISA Feature Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARMv4 or higher instruction set.
 * @see	#YepARMIsaFeatureV4
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_V4_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARMv5 or higher instruction set.
 * @see	#YepARMIsaFeatureV5
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_V5_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARMv5 DSP instructions.
 * @see	#YepARMIsaFeatureV5E
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_V5E_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARMv6 or higher instruction set.
 * @see	#YepARMIsaFeatureV6
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_V6_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARMv6 multiprocessing extension.
 * @see	#YepARMIsaFeatureV6K
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_V6K_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARMv7 or higher instruction set.
 * @see	#YepARMIsaFeatureV7
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_V7_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM XScale instructions.
 * @see	#YepARMSimdFeatureXScale
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_XSCALE_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM Wireless MMX instruction set.
 * @see	#YepARMSimdFeatureWMMX
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_WMMX_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM Wireless MMX 2 instruction set.
 * @see	#YepARMSimdFeatureWMMX
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_WMMX2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM NEON instruction set.
 * @see	#YepARMSimdFeatureNEON
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_NEON_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM VFP instruction set.
 * @see	#YepARMIsaFeatureVFP
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_VFP_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM VFPv2 instruction set.
 * @see	#YepARMIsaFeatureVFP2
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_VFP2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM VFPv3 instruction set.
 * @see	#YepARMIsaFeatureVFP3
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_VFP3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports 32 double-precision registers in ARM VFPv3 (or higher) instruction set.
 * @see	#YepARMIsaFeatureVFPd32
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_VFP3_D32_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM VFPv3 half-precision extension.
 * @see	#YepARMIsaFeatureVFP3HP
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_VFP3HP_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM VFPv4 instruction set.
 * @see	#YepARMIsaFeatureVFP4
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_VFP4_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports ARM SDIV/UDIV instructions.
 * @see	#YepARMIsaFeatureDiv
 */
#define YEP_PROCESSOR_SUPPORTS_ARM_DIV_EXTENSION
/**@}*/

/** @name	MIPS Target ISA Feature Identification */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports MIPS R2 instruction set.
 * @see	#YepMIPSIsaFeatureR2
 */
#define YEP_PROCESSOR_SUPPORTS_MIPS_R2_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports MIPS 3D instruction set.
 * @see	#YepMIPSSimdFeatureMIPS3D
 */
#define YEP_PROCESSOR_SUPPORTS_MIPS_3D_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports Paired Single instructions.
 * @see	#YepMIPSSimdFeaturePairedSingle
 */
#define YEP_PROCESSOR_SUPPORTS_MIPS_PAIREDSINGLE_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports MIPS DSP instruction set.
 * @see	#YepMIPSSimdFeatureDSP
 */
#define YEP_PROCESSOR_SUPPORTS_MIPS_DSP_INSTRUCTIONS
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the target processor supports MIPS DSPr2 instruction set.
 * @see	#YepMIPSSimdFeatureDSP2
 */
#define YEP_PROCESSOR_SUPPORTS_MIPS_DSP2_INSTRUCTIONS
/**@}*/

/** @name	Compiler Support Identification for x86/x86-64 Intrinsics */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 MMX intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports MMX instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports MMX instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_MMX_EXTENSION macro to check availability of MMX instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureMMX, #YEP_PROCESSOR_SUPPORTS_X86_MMX_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_MMX_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 MMX+ intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports MMX+ instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports MMX+ instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_MMXPLUS_EXTENSION macro to check availability of MMX+ instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureMMXPlus, #YEP_PROCESSOR_SUPPORTS_X86_MMXPLUS_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_MMXPLUS_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 3dnow! intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports 3dnow! instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports 3dnow! instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_3DNOW_EXTENSION macro to check availability of 3dnow! instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeature3dnow, #YEP_PROCESSOR_SUPPORTS_X86_3DNOW_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_3DNOW_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 3dnow!+ intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports 3dnow!+ instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports 3dnow!+ instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_3DNOWPLUS_EXTENSION macro to check availability of 3dnow!+ instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeature3dnowPlus, #YEP_PROCESSOR_SUPPORTS_X86_3DNOWPLUS_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_3DNOWPLUS_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSE intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSE instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSE instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSE_EXTENSION macro to check availability of SSE instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSE, #YEP_PROCESSOR_SUPPORTS_X86_SSE_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSE_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSE2 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSE2 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSE2 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSE2_EXTENSION macro to check availability of SSE2 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSE2, #YEP_PROCESSOR_SUPPORTS_X86_SSE2_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSE2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSE3 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSE3 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSE3 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSE3_EXTENSION macro to check availability of SSE3 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSE3, #YEP_PROCESSOR_SUPPORTS_X86_SSE3_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSE3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSSE3 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSSE3 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSSE3 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSSE3_EXTENSION macro to check availability of SSSE3 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSSE3, #YEP_PROCESSOR_SUPPORTS_X86_SSSE3_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSSE3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSE4a intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSE4a instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSE4a instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSE4A_EXTENSION macro to check availability of SSE4a instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSE4A, #YEP_PROCESSOR_SUPPORTS_X86_SSE4A_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSE4A_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSE4.1 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSE4.1 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSE4.1 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSE4_1_EXTENSION macro to check availability of SSE4.1 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSE4_1, #YEP_PROCESSOR_SUPPORTS_X86_SSE4_1_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSE4_1_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 SSE4.2 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports SSE4.2 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports SSE4.2 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_SSE4_2_EXTENSION macro to check availability of SSE4.2 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureSSE4_2, #YEP_PROCESSOR_SUPPORTS_X86_SSE4_2_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_SSE4_2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 AVX intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports AVX instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports AVX instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_AVX_EXTENSION macro to check availability of AVX instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureAVX, #YEP_PROCESSOR_SUPPORTS_X86_AVX_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_AVX_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 AVX2 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports AVX2 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports AVX2 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_AVX2_EXTENSION macro to check availability of AVX2 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureAVX2, #YEP_PROCESSOR_SUPPORTS_X86_AVX2_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_AVX2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 F16C intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports F16C instructions.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports F16C instructions,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_F16C_EXTENSION macro to check availability of F16C instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureF16C, #YEP_PROCESSOR_SUPPORTS_X86_F16C_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_F16C_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 FMA4 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports FMA4 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports FMA4 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_FMA4_EXTENSION macro to check availability of FMA4 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureFMA4, #YEP_PROCESSOR_SUPPORTS_X86_FMA4_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_FMA4_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 FMA3 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports FMA3 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports FMA3 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_FMA3_EXTENSION macro to check availability of FMA3 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureFMA3, #YEP_PROCESSOR_SUPPORTS_X86_FMA3_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_FMA3_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 XOP intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports XOP instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports XOP instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_XOP_EXTENSION macro to check availability of XOP instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureXOP, #YEP_PROCESSOR_SUPPORTS_X86_XOP_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_XOP_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports x86/x86-64 KNC intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports KNC instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports KNC instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_X86_KNC_EXTENSION macro to check availability of KNC instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepX86SimdFeatureKNC, #YEP_PROCESSOR_SUPPORTS_X86_KNC_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_X86_KNC_EXTENSION
/**@}*/

/** @name	Compiler Support Identification for ARM Intrinsics */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports ARM WMMX intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports WMMX instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports WMMX instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_ARM_WMMX_EXTENSION macro to check availability of WMMX instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepARMSimdFeatureWMMX, #YEP_PROCESSOR_SUPPORTS_ARM_WMMX_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_ARM_WMMX_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports ARM WMMX 2 intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports WMMX 2 instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports WMMX 2 instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_ARM_WMMX2_EXTENSION macro to check availability of WMMX 2 instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepARMSimdFeatureWMMX2, #YEP_PROCESSOR_SUPPORTS_ARM_WMMX2_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_ARM_WMMX2_EXTENSION
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports ARM NEON intrinsics for this compilation.
 * @warning	This macro does not guarantee that the target processor supports NEON instruction set.
 *         	Use #yepLibrary_GetCpuSimdFeatures function to detect in run-time if processor supports NEON instruction set,
 *         	or #YEP_PROCESSOR_SUPPORTS_ARM_NEON_EXTENSION macro to check availability of NEON instructions on target processor in compile-time.
 * @see	#yepLibrary_GetCpuSimdFeatures, #YepARMSimdFeatureNEON, #YEP_PROCESSOR_SUPPORTS_ARM_NEON_EXTENSION
 */
#define YEP_COMPILER_SUPPORTS_ARM_NEON_EXTENSION
/**@}*/

/** @name	Miscellaneous */
/**@{*/
/**
 * @ingroup yepPredefines
 * @brief	Defined only when the compiler supports hexadecimal floating-point constants.
 */
#define YEP_COMPILER_SUPPORTS_HEXADECIMAL_FLOATING_POINT_CONSTANTS
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific null pointer.
 */
#define YEP_NULL_POINTER compiler-specific-nullptr
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific analog of C99 restrict qualifier.
 * @details	Supported compilers currently include only Microsoft compiler, Intel compiler, ARM compiler, GCC, Clang, all C99-compatible compilers, and nVidia CUDA compiler.
 */
#define YEP_RESTRICT compiler-specific-restrict-qualifier
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific attribute which indicated that the function should not be inlined.
 * @details	Supported compilers currently include only Microsoft compiler, Intel compiler, GCC, Clang, and nVidia CUDA compiler.
 * @warning	The function marked with YEP_NOINLINE can still be inlined if an unsupported compiler is used.
 * @warning	For CUDA devices with compute capability 1.x compiler is not guaranteed to honour YEP_NOINLINE specifier.
 */
#define YEP_NOINLINE compiler-specific-noinline-attribute
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific attribute which indicated that the function should be inlined.
 * @details	Supported compilers currently include only Microsoft compiler, Intel compiler, GCC, Clang, all C99-compatible compilers, all C++ compilers, and nVidia CUDA compiler.
 * @warning	The function marked with YEP_INLINE is not 100% guaranteed to be inlined.
 */
#define YEP_INLINE compiler-specific-inline-attribute
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific attribute which indicated that the function never returns.
 * @details	Supported compilers currently include only Microsoft compiler, Intel compiler, GCC, Clang, ARM compiler, and nVidia CUDA compiler.
 */
#define YEP_NORETURN compiler-specific-noreturn-attribute
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific analog of C++ 11 alignas attribute.
 * @details	Specifies the alignment of a type or variable.
 */
#define YEP_ALIGN(alignment) compiler-specific-alignas-attribute
/**
 * @ingroup yepPredefines
 * @brief	Expands to compiler-specific analog of C++ 11 alignof operator.
 * @details	Returns the alignment of the specified type.
 */
#define YEP_ALIGN_OF(type) compiler-specific-alignof-operator
/**
 * @ingroup yepPredefines
 * @brief	Marks the function as a device function in CUDA. Has no effect in C and C++.
 * @details	Expands to __device__ when compiled by CUDA compiler for a device. Expands to nothing in all other cases.
 */
#define YEP_NATIVE_FUNCTION
/**
 * @ingroup yepPredefines
 * @brief	Hints the compiler that the condition in the argument is likely to be true. Returns the condition result.
 */
#define YEP_LIKELY(condition) (condition)
/**
 * @ingroup yepPredefines
 * @brief	Hints the compiler that the condition in the argument is likely to be false. Returns the condition result.
 */
#define YEP_UNLIKELY(condition) (condition)
/**
 * @ingroup yepPredefines
 * @brief	Defined only when position-independent code (PIC) generation is enabled.
 */
#define YEP_PIC
/**
 * @ingroup yepPredefines
 * @brief	Defined only when a program is compiled by Visual Studio-compatible compiler without default runtime.
 * @details	When this macro is defined, an unconventional entry point might be used for programs and dynamic libraries.
 */
#define YEP_CUSTOM_RUNTIME
/**
 * @ingroup yepPredefines
 * @brief	Returns the number of elements in an array. The size of the array must be known at compile time.
 */
#define YEP_COUNT_OF(x) (sizeof(x) / sizeof(x[0]))
/**@}*/
