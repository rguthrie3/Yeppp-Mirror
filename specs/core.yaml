module: core

functions:
    - operation: Add
      function_groups:
        # Functions which add two vectors and store in a third vector
        - c_documentation: |
            @brief	Adds corresponding elements in two %(InputType0)s arrays. Produces an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the first addend array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second addend array of %(InputType1)s elements.
            @param[out]	sum	Pointer to the summand array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a sum.
          java_documentation: |
            @brief	Adds corresponding elements in two %(InputType0)s arrays. Produces an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                const ${sumPointer.arg_type} x = *xPointer++;
                const ${sumPointer.arg_type} y = *yPointer++;
                const ${sumPointer.arg_type} sum = x + y;
                *sumPointer++ = sum;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Add_V8sV8s_V8s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V8sV8s_V16s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V8uV8u_V16u xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V16sV16s_V16s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V16sV16s_V32s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V16uV16u_V32u xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V32sV32s_V32s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V32sV32s_V64s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V32uV32u_V64u xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V64sV64s_V64s xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V32fV32f_V32f xPointer, yPointer, sumPointer, YepSize length
            - declaration: yepCore_Add_V64fV64f_V64f xPointer, yPointer, sumPointer, YepSize length
              # Functions which add a scalar to a vector element-wise
        - c_documentation: |
            @brief	Adds a constant to %(InputType0)s array elements. Produces an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the addend array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant to be added.
            @param[out]	sum	Pointer to the summand array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a sum.
          java_documentation: |
            @brief	Adds a constant to %(InputType0)s array elements. Produces an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                const ${sumPointer.arg_type} x = *xPointer++;
                const ${sumPointer.arg_type} sum = x + y;
                *sumPointer++ = sum;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Add_V8sS8s_V8s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V8sS8s_V16s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V8uS8u_V16u xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V16sS16s_V16s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V16sS16s_V32s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V16uS16u_V32u xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V32sS32s_V32s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V32sS32s_V64s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V32uS32u_V64u xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V64sS64s_V64s xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V32fS32f_V32f xPointer, y, sumPointer, YepSize length
            - declaration: yepCore_Add_V64fS64f_V64f xPointer, y, sumPointer, YepSize length
              # Functions which add two vectors and store the result in the first vector
        - c_documentation: |
            @brief	Adds corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
            @param[in,out]	x	Pointer to the first addend array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second addend array of %(InputType1)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Adds corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                ${xPointer.arg_type} y = *yPointer++;
                x += y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Add_IV8sV8s_IV8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Add_IV16sV16s_IV16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Add_IV32sV32s_IV32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Add_IV64sV64s_IV64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Add_IV32fV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Add_IV64fV64f_IV64f xPointer, yPointer, YepSize length

        # Functions which add a scalar to an immediate vector
        - c_documentation: |
            @brief	Adds a constant to %(InputType0)s array elements and writes the result to the same array.
            @param[in,out]	x	Pointer to the addend array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant to be added.
            @param[in]	length	Length of the array specified by @a x.
          java_documentation: |
            @brief	Adds a constant to %(InputType0)s array elements and writes the result to the same array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                x += y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Add_IV8sS8s_IV8s xPointer, y, YepSize length
            - declaration: yepCore_Add_IV16sS16s_IV16s xPointer, y, YepSize length
            - declaration: yepCore_Add_IV32sS32s_IV32s xPointer, y, YepSize length
            - declaration: yepCore_Add_IV64sS64s_IV64s xPointer, y, YepSize length
            - declaration: yepCore_Add_IV32fS32f_IV32f xPointer, y, YepSize length
            - declaration: yepCore_Add_IV64fS64f_IV64f xPointer, y, YepSize length
    - operation: Subtract
      function_groups:
        - c_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays. Produces an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the minuend array of %(InputType0)s elements.
            @param[in]	y	Pointer to the subtrahend array of %(InputType1)s elements.
            @param[out]	diff	Pointer to the difference array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a diff.
          java_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays. Produces an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                ${diffPointer.arg_type} x = *xPointer++;
                ${diffPointer.arg_type} y = *yPointer++;
                ${diffPointer.arg_type} diff = x - y;
                *diffPointer++ = diff;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Subtract_V8sV8s_V8s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V8sV8s_V16s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V8uV8u_V16u xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V16sV16s_V16s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V16sV16s_V32s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V16uV16u_V32u xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32sV32s_V32s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32sV32s_V64s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32uV32u_V64u xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V64sV64s_V64s xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32fV32f_V32f xPointer, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V64fV64f_V64f xPointer, yPointer, diffPointer, YepSize length

        - c_documentation: |
            @brief	Subtracts a constant from %(InputType0)s array elements. Produces an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the minuend array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant to be subtracted.
            @param[out]	diff	Pointer to the difference array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a diff.
          java_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays. Produces an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                ${diffPointer.arg_type} x = *xPointer++;
                ${diffPointer.arg_type} diff = x - y;
                *diffPointer++ = diff;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Subtract_V8sS8s_V8s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V8sS8s_V16s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V8uS8u_V16u xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V16sS16s_V16s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V16sS16s_V32s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V16uS16u_V32u xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32sS32s_V32s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32sS32s_V64s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32uS32u_V64u xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V64sS64s_V64s xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V32fS32f_V32f xPointer, y, diffPointer, YepSize length
            - declaration: yepCore_Subtract_V64fS64f_V64f xPointer, y, diffPointer, YepSize length

        - c_documentation: |
            @brief	Subtracts %(InputType1)s array elements from a constant. Produces an array of %(OutputType0)s elements.
            @param[in]	x	The %(InputType0)s constant to be subtracted from.
            @param[in]	y	Pointer to the subtrahend array of %(InputType1)s elements.
            @param[out]	diff	Pointer to the difference array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a y and @a diff.
          java_documentation: |
            @brief	Subtracts %(InputType1)s array elements from a constant. Produces an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                ${diffPointer.arg_type} y = *yPointer++;
                ${diffPointer.arg_type} diff = x - y;
                *diffPointer++ = diff;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Subtract_S8sV8s_V8s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S8sV8s_V16s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S8uV8u_V16u x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S16sV16s_V16s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S16sV16s_V32s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S16uV16u_V32u x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S32sV32s_V32s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S32sV32s_V64s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S32uV32u_V64u x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S64sV64s_V64s x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S32fV32f_V32f x, yPointer, diffPointer, YepSize length
            - declaration: yepCore_Subtract_S64fV64f_V64f x, yPointer, diffPointer, YepSize length

        - c_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
            @param[in,out]	x	Pointer to the minuend array of %(InputType0)s elements.
            @param[in]	y	Pointer to the subtrahend array of %(InputType1)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                ${xPointer.arg_type} y = *yPointer++;
                x -= y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Subtract_IV8sV8s_IV8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_IV16sV16s_IV16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_IV32sV32s_IV32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_IV64sV64s_IV64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_IV32fV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_IV64fV64f_IV64f xPointer, yPointer, YepSize length

        - c_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays and writes the result to the second array.
            @param[in]	x	Pointer to the minuend array of %(InputType0)s elements.
            @param[in,out]	y	Pointer to the subtrahend array of %(InputType1)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Subtracts corresponding elements in two %(InputType0)s arrays and writes the result to the second array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer++;
                ${xPointer.arg_type} y = *yPointer;
                y = x - y;
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Subtract_V8sIV8s_IV8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_V16sIV16s_IV16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_V32sIV32s_IV32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_V64sIV64s_IV64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_V32fIV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Subtract_V64fIV64f_IV64f xPointer, yPointer, YepSize length

        - c_documentation: |
            @brief	Subtracts a constant from %(InputType0)s array elements and writes the result to the same array.
            @param[in,out]	x	Pointer to the minuend array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant to be subtracted.
            @param[in]	length	Length of the array specified by @a x.
          java_documentation: |
            @brief	Subtracts a constant from %(InputType0)s array elements and writes the result to the same array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                x -= y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Subtract_IV8sS8s_IV8s xPointer, y, YepSize length
            - declaration: yepCore_Subtract_IV16sS16s_IV16s xPointer, y, YepSize length
            - declaration: yepCore_Subtract_IV32sS32s_IV32s xPointer, y, YepSize length
            - declaration: yepCore_Subtract_IV64sS64s_IV64s xPointer, y, YepSize length
            - declaration: yepCore_Subtract_IV32fS32f_IV32f xPointer, y, YepSize length
            - declaration: yepCore_Subtract_IV64fS64f_IV64f xPointer, y, YepSize length
    - operation: Negate
      function_groups:
        - c_documentation: |
            @brief	Negates elements in %(InputType0)s array.
            @param[in]	x	Pointer to the array of %(InputType0)s elements to be negated.
            @param[out]	y	Pointer to the %(OutputType0)s array to store negated elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Negates elements in %(InputType0)s array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer++;
                ${xPointer.arg_type} y = -x;
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Negate_V8s_V8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Negate_V16s_V16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Negate_V32s_V32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Negate_V64s_V64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Negate_V32f_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Negate_V64f_V64f xPointer, yPointer, YepSize length

        - c_documentation: |
            @brief	Negates elements in %(InputType0)s array and writes the results to the same array.
            @param[in,out]	v	Pointer to the array of %(InputType0)s elements to be negated.
            @param[in]	length	Length of the array specified by @a v.
          java_documentation: |
            @brief	Negates elements in %(InputType0)s array and writes the results to the same array.
          default_implementation_template: |
            while (length-- != 0) {
                ${vPointer.arg_type} v = *vPointer;
                ${vPointer.arg_type} minusV = -v;
                *vPointer++ = minusV;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Negate_IV8s_IV8s vPointer, YepSize length
            - declaration: yepCore_Negate_IV16s_IV16s vPointer, YepSize length
            - declaration: yepCore_Negate_IV32s_IV32s vPointer, YepSize length
            - declaration: yepCore_Negate_IV64s_IV64s vPointer, YepSize length
            - declaration: yepCore_Negate_IV32f_IV32f vPointer, YepSize length
            - declaration: yepCore_Negate_IV64f_IV64f vPointer, YepSize length
    - operation: Multiply
      function_groups:
        # Multiply two vectors and store in a third
        - c_documentation: |
            @brief	Multiples corresponding elements in two %(InputType0)s arrays, producing an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the first factor array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second factor array of %(InputType1)s elements.
            @param[out]	product	Pointer to the product array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a product.
          java_documentation: |
            @brief	Multiples corresponding elements in two %(InputType0)s arrays, producing an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                ${productPointer.arg_type} x = *xPointer++;
                ${productPointer.arg_type} y = *yPointer++;
                ${productPointer.arg_type} product = x * y;
                *productPointer++ = product;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Multiply_V8sV8s_V8s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V8sV8s_V16s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V8uV8u_V16u xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V16sV16s_V16s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V16sV16s_V32s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V16uV16u_V32u xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32sV32s_V32s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32sV32s_V64s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32uV32u_V64u xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V64sV64s_V64s xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32fV32f_V32f xPointer, yPointer, productPointer, YepSize length
            - declaration: yepCore_Multiply_V64fV64f_V64f xPointer, yPointer, productPointer, YepSize length
        # Multiply a vector by a scalar constant
        - c_documentation: |
            @brief	Multiplies %(InputType0)s array elements by a constant. Produces an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the factor array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant to be multiplied by.
            @param[out]	product	Pointer to the product array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a product.
          java_documentation: |
            @brief Multiplies %(InputType0)s array elements by a constant. Produces an array of %(OutputType0)s elements.
          default_implementation_template: |
            while (length-- != 0) {
                ${productPointer.arg_type} x = *xPointer++;
                ${productPointer.arg_type} product = x * y;
                *productPointer++ = product;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Multiply_V8sS8s_V8s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V8sS8s_V16s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V8uS8u_V16u xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V16sS16s_V16s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V16sS16s_V32s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V16uS16u_V32u xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32sS32s_V32s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32sS32s_V64s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32uS32u_V64u xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V64sS64s_V64s xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V32fS32f_V32f xPointer, y, productPointer, YepSize length
            - declaration: yepCore_Multiply_V64fS64f_V64f xPointer, y, productPointer, YepSize length
        # Multiply a vector and writes to the first array
        - c_documentation: |
            @brief	Multiplies corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
            @param[in,out]	x	Pointer to the first factor array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second factor array of %(InputType1)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Multiplies corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                ${xPointer.arg_type} y = *yPointer++;
                x *= y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Multiply_IV8sV8s_IV8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Multiply_IV16sV16s_IV16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Multiply_IV32sV32s_IV32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Multiply_IV64sV64s_IV64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Multiply_IV32fV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Multiply_IV64fV64f_IV64f xPointer, yPointer, YepSize length
        # Multiply a vector by a constant and write to same array
        - c_documentation: |
            @brief	Multiplies %(InputType0)s array elements by a constant and writes the result to the same array.
            @param[in,out]	x	Pointer to the factor array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant factor.
            @param[in]	length	Length of the array specified by @a x.
          java_documentation: |
            @brief	Multiplies %(InputType0)s array elements by a constant and writes the result to the same array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                x *= y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Multiply_IV8sS8s_IV8s xPointer, y, YepSize length
            - declaration: yepCore_Multiply_IV16sS16s_IV16s xPointer, y, YepSize length
            - declaration: yepCore_Multiply_IV32sS32s_IV32s xPointer, y, YepSize length
            - declaration: yepCore_Multiply_IV64sS64s_IV64s xPointer, y, YepSize length
            - declaration: yepCore_Multiply_IV32fS32f_IV32f xPointer, y, YepSize length
            - declaration: yepCore_Multiply_IV64fS64f_IV64f xPointer, y, YepSize length
    - operation: MultiplyAdd
      function_groups:
        # MultiplyAdd two vectors and store in a third
        - c_documentation: |
            @brief	Multiples corresponding elements in two %(InputType0)s arrays and adds corresponding elements of the third array, producing an array of %(OutputType0)s elements.
            @param[in]	x	Pointer to the first factor array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second factor array of %(InputType1)s elements.
            @param[in]	z	Pointer to the addend array of %(InputType2)s elements.
            @param[out]	mac	Pointer to the resulting array of %(OutputType0)s elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, @a z, and @a mac.
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${macPointer.arg_type} x = *xPointer++;
                ${macPointer.arg_type} y = *yPointer++;
                ${macPointer.arg_type} z = *zPointer++;
                ${macPointer.arg_type} mac = x * y + z;
                *macPointer++ = mac;
            }
            return YepStatusOk;
          group:
              - declaration: yepCore_MultiplyAdd_V32fV32fV32f_V32f xPointer, yPointer, zPointer, macPointer, YepSize length
              - declaration: yepCore_MultiplyAdd_V64fV64fV64f_V64f xPointer, yPointer, zPointer, macPointer, YepSize length
        # MultiplyAdd and store result in third vector
        - c_documentation: |
            @brief	Computes pairwise products of %(InputType0)s elements in two arrays and then adds the third %(InputType2)s array to the result, overwriting the third array.
            @param[in]	x	Pointer the first input array of %(InputType0)s elements to be multiplied.
            @param[in]	y	Constant to multiply the first input array by
            @param[in,out]	z	Pointer the input/output array of %(InputType2)s elements to be added to the intermediate multiplication result.
            @param[in]	length	Length of the arrays pointed by @a xPointer, and @a zPointer.
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${zPointer.arg_type} x = *xPointer++;
                ${zPointer.arg_type} z = *zPointer;
                z = x * y + z;
                *zPointer++ = z;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_MultiplyAdd_V32fS32fIV32f_IV32f xPointer, y, zPointer, YepSize length
            - declaration: yepCore_MultiplyAdd_V64fS64fIV64f_IV64f xPointer, y, zPointer, YepSize length
    - operation: Divide
      function_groups:
        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${fractionPointer.arg_type} x = *xPointer++;
                ${fractionPointer.arg_type} y = *yPointer++;
                ${fractionPointer.arg_type} fraction = x / y;
                *fractionPointer++ = fraction;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_V32fV32f_V32f xPointer, yPointer, fractionPointer, YepSize length
            - declaration: yepCore_Divide_V64fV64f_V64f xPointer, yPointer, fractionPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${fractionPointer.arg_type} x = *xPointer++;
                ${fractionPointer.arg_type} fraction = x / y;
                *fractionPointer++ = fraction;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_V32fS32f_V32f xPointer, y, fractionPointer, YepSize length
            - declaration: yepCore_Divide_V64fS64f_V64f xPointer, y, fractionPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${fractionPointer.arg_type} y = *yPointer++;
                ${fractionPointer.arg_type} fraction = x / y;
                *fractionPointer++ = fraction;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_S32fV32f_V32f x, yPointer, fractionPointer, YepSize length
            - declaration: yepCore_Divide_S64fV64f_V64f x, yPointer, fractionPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                ${xPointer.arg_type} y = *yPointer++;
                x /= y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_IV32fV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Divide_IV64fV64f_IV64f xPointer, yPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${yPointer.arg_type} x = *xPointer++;
                ${yPointer.arg_type} y = *yPointer;
                y = x / y;
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_V32fIV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Divide_V64fIV64f_IV64f xPointer, yPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                x /= y;
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_IV32fS32f_IV32f xPointer, y, YepSize length
            - declaration: yepCore_Divide_IV64fS64f_IV64f xPointer, y, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${yPointer.arg_type} y = *yPointer;
                y = x / y;
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Divide_S32fIV32f_IV32f x, yPointer, YepSize length
            - declaration: yepCore_Divide_S64fIV64f_IV64f x, yPointer, YepSize length
    - operation: Reciprocal
      function_groups:
        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${yPointer.arg_type} x = *xPointer++;
                ${yPointer.arg_type} y = Yep${yPointer.size}s(1) / x;
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Reciprocal_V32f_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V64f_V64f xPointer, yPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${yPointer.arg_type} x = *xPointer++;
                ${yPointer.arg_type} y = Yep${yPointer.size}s(1) / yepBuiltin_Convert_${xPointer.size}s_${yPointer.size}f(x);
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Reciprocal_V8u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V8s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V16u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V16s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V32u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V32s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V64u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V64s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V8u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V8s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V16u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V16s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V32u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V32s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V64u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Reciprocal_V64s_V64f xPointer, yPointer, YepSize length

        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${vPointer.arg_type} v = *vPointer;
                ${vPointer.arg_type} rcpV = Yep${vPointer.size}s(1) / v;
                *vPointer++ = rcpV;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Reciprocal_IV32f_IV32f vPointer, YepSize length
            - declaration: yepCore_Reciprocal_IV64f_IV64f vPointer, YepSize length
    - operation: Convert
      function_groups:
        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${yPointer.arg_type} x = *xPointer++;
                ${yPointer.arg_type} y = yepBuiltin_Convert_${xPointer.size}s_${yPointer.size}f(x);
                *yPointer++ = y;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Convert_V8s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V8u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V16s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V16u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V32s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V32u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V64s_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V64u_V32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V8s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V8u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V16s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V16u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V32s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V32u_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V64s_V64f xPointer, yPointer, YepSize length
            - declaration: yepCore_Convert_V64u_V64f xPointer, yPointer, YepSize length
    - operation: Min
      function_groups:

        - c_documentation: |
            @brief	Computes the minimum of %(InputType0)s array elements.
            @param[in]	v	Pointer to the array of elements whose minimum will be computed.
            @param[out]	minimum	Pointer to the variable where the minimum will be stored.
            @param[in]	length	Length of the array specified by @a v. Must be non-zero.
          java_documentation: |
            @brief	Computes the minimum of %(InputType0)s array elements.
          default_implementation_template: |
            ${vPointer.arg_type} minimum = *vPointer++;
            while (--length != 0) {
                ${vPointer.arg_type} v = *vPointer++;
                minimum = yepBuiltin_Min_${vPointer.size}s${vPointer.size}s_${vPointer.size}s(v, minimum);
            }
            *minimumPointer++ = minimum;
            return YepStatusOk;
          group:
            - declaration: yepCore_Min_V8s_S8s vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V8u_S8u vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V16s_S16s vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V16u_S16u vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32s_S32s vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32u_S32u vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64s_S64s vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64u_S64u vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32f_S32f vPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64f_S64f vPointer, minimumPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise minima of corresponding elements in two %(InputType0)s arrays.
            @param[in]	x	Pointer to the first array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second array of %(InputType1)s elements.
            @param[out]	minimum	Pointer to the array of pairwise minimum elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
          java_documentation: |
            @brief	Computes pairwise minima of corresponding elements in two %(InputType0)s arrays.
          default_implementation_template: |
            while (length-- != 0) {
                ${minimumPointer.arg_type} x = *xPointer++;
                ${minimumPointer.arg_type} y = *yPointer++;
                ${minimumPointer.arg_type} minimum = yepBuiltin_Min_${minimumPointer.size}s${minimumPointer.size}s_${minimumPointer.size}s(x, y);
                *minimumPointer++ = minimum;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Min_V8sV8s_V8s xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V8uV8u_V8u xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V16sV16s_V16s xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V16uV16u_V16u xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32sV32s_V32s xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32uV32u_V32u xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64sV32s_V64s xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64uV32u_V64u xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32fV32f_V32f xPointer, yPointer, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64fV64f_V64f xPointer, yPointer, minimumPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise minima of %(InputType0)s array elements and a constant.
            @param[in]	x	Pointer to the first array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant.
            @param[out]	minimum	Pointer to the array of pairwise minimum elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a minimum.
          java_documentation: |
            @brief	Computes pairwise minima of %(InputType0)s array elements and a constant.
          default_implementation_template: |
            while (length-- != 0) {
                ${minimumPointer.arg_type} x = *xPointer++;
                ${minimumPointer.arg_type} minimum = yepBuiltin_Min_${minimumPointer.size}s${minimumPointer.size}s_${minimumPointer.size}s(x, y);
                *minimumPointer++ = minimum;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Min_V8sS8s_V8s xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V8uS8u_V8u xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V16sS16s_V16s xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V16uS16u_V16u xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32sS32s_V32s xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32uS32u_V32u xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64sS32s_V64s xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64uS32u_V64u xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V32fS32f_V32f xPointer, y, minimumPointer, YepSize length
            - declaration: yepCore_Min_V64fS64f_V64f xPointer, y, minimumPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise minima of corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
            @param[in,out]	x	Pointer to the first array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second array of %(InputType1)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Computes pairwise minima of corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
          default_implementation_template: |
            while (length-- != 0) {
                ${yPointer.arg_type} x = *xPointer;
                ${yPointer.arg_type} y = *yPointer++;
                x = yepBuiltin_Min_${xPointer.size}s${xPointer.size}s_${xPointer.size}s(x, y);
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Min_IV8sV8s_IV8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV8uV8u_IV8u xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV16sV16s_IV16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV16uV16u_IV16u xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV32sV32s_IV32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV32uV32u_IV32u xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV64sV32s_IV64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV64uV32u_IV64u xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV32fV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Min_IV64fV64f_IV64f xPointer, yPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise minima of %(InputType0)s array elements and a constant and writes the result to the same array.
            @param[in,out]	x	Pointer to the array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Computes pairwise minima of %(InputType0)s array elements and a constant and writes the result to the same array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                x = yepBuiltin_Min_${xPointer.size}s${xPointer.size}s_${xPointer.size}s(x, y);
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Min_IV8sS8s_IV8s xPointer, y, YepSize length
            - declaration: yepCore_Min_IV8uS8u_IV8u xPointer, y, YepSize length
            - declaration: yepCore_Min_IV16sS16s_IV16s xPointer, y, YepSize length
            - declaration: yepCore_Min_IV16uS16u_IV16u xPointer, y, YepSize length
            - declaration: yepCore_Min_IV32sS32s_IV32s xPointer, y, YepSize length
            - declaration: yepCore_Min_IV32uS32u_IV32u xPointer, y, YepSize length
            - declaration: yepCore_Min_IV64sS32s_IV64s xPointer, y, YepSize length
            - declaration: yepCore_Min_IV64uS32u_IV64u xPointer, y, YepSize length
            - declaration: yepCore_Min_IV32fS32f_IV32f xPointer, y, YepSize length
            - declaration: yepCore_Min_IV64fS64f_IV64f xPointer, y, YepSize length
    - operation: Max
      function_groups:

        - c_documentation: |
            @brief	Computes the maximum of %(InputType0)s array elements.
            @param[in]	v	Pointer to the array of elements whose maximum will be computed.
            @param[out]	maximum	Pointer to the variable where the maximum will be stored.
            @param[in]	length	Length of the array specified by @a v. Must be non-zero.
          java_documentation: |
            @brief	Computes the maximum of %(InputType0)s array elements.
          default_implementation_template: |
            ${vPointer.arg_type} maximum = *vPointer++;
            while (--length != 0) {
                ${vPointer.arg_type} v = *vPointer++;
                maximum = yepBuiltin_Max_${vPointer.size}s${vPointer.size}s_${vPointer.size}s(v, maximum);
            }
            *maximumPointer = maximum;
            return YepStatusOk;
          group:
            - declaration: yepCore_Max_V8s_S8s vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V8u_S8u vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V16s_S16s vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V16u_S16u vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32s_S32s vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32u_S32u vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64s_S64s vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64u_S64u vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32f_S32f vPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64f_S64f vPointer, maximumPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise maxima of corresponding elements in two %(InputType0)s arrays.
            @param[in]	x	Pointer to the first array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second array of %(InputType1)s elements.
            @param[out]	maximum	Pointer to the array of pairwise maximum elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
          java_documentation: |
            @brief	Computes pairwise maxima of corresponding elements in two %(InputType0)s arrays.
          default_implementation_template: |
            while (length-- != 0) {
                ${maximumPointer.arg_type} x = *xPointer++;
                ${maximumPointer.arg_type} y = *yPointer++;
                ${maximumPointer.arg_type} maximum = yepBuiltin_Max_${(maximumPointer.size + maximumPointer.data_type_letter) * 2 + '_' + maximumPointer.size + maximumPointer.data_type_letter}(x, y);
                *maximumPointer++ = maximum;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Max_V8sV8s_V8s xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V8uV8u_V8u xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V16sV16s_V16s xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V16uV16u_V16u xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32sV32s_V32s xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32uV32u_V32u xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64sV32s_V64s xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64uV32u_V64u xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32fV32f_V32f xPointer, yPointer, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64fV64f_V64f xPointer, yPointer, maximumPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise maxima of %(InputType0)s array elements and a constant.
            @param[in]	x	Pointer to the first array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant.
            @param[out]	maximum	Pointer to the array of pairwise maximum elements.
            @param[in]	length	Length of the arrays specified by @a x, @a y, and @a maximum.
          java_documentation: |
            @brief	Computes pairwise maxima of %(InputType0)s array elements and a constant.
          default_implementation_template: |
            while (length-- != 0) {
                ${maximumPointer.arg_type} x = *xPointer++;
                ${maximumPointer.arg_type} maximum = yepBuiltin_Max_${(maximumPointer.size + maximumPointer.data_type_letter) * 2 + '_' + maximumPointer.size + maximumPointer.data_type_letter}(x, y);
                *maximumPointer++ = maximum;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Max_V8sS8s_V8s xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V8uS8u_V8u xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V16sS16s_V16s xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V16uS16u_V16u xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32sS32s_V32s xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32uS32u_V32u xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64sS32s_V64s xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64uS32u_V64u xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V32fS32f_V32f xPointer, y, maximumPointer, YepSize length
            - declaration: yepCore_Max_V64fS64f_V64f xPointer, y, maximumPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise maxima of corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
            @param[in,out]	x	Pointer to the first array of %(InputType0)s elements.
            @param[in]	y	Pointer to the second array of %(InputType1)s elements.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Computes pairwise maxima of corresponding elements in two %(InputType0)s arrays and writes the result to the first array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                ${xPointer.arg_type} y = *yPointer++;
                x = yepBuiltin_Max_${xPointer.size}s${xPointer.size}s_${xPointer.size}s(x, y);
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Max_IV8sV8s_IV8s xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV8uV8u_IV8u xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV16sV16s_IV16s xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV16uV16u_IV16u xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV32sV32s_IV32s xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV32uV32u_IV32u xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV64sV32s_IV64s xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV64uV32u_IV64u xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV32fV32f_IV32f xPointer, yPointer, YepSize length
            - declaration: yepCore_Max_IV64fV64f_IV64f xPointer, yPointer, YepSize length

        - c_documentation: |
            @brief	Computes pairwise maxima of %(InputType0)s array elements and a constant and writes the result to the same array.
            @param[in,out]	x	Pointer to the array of %(InputType0)s elements.
            @param[in]	y	The %(InputType1)s constant.
            @param[in]	length	Length of the arrays specified by @a x and @a y.
          java_documentation: |
            @brief	Computes pairwise maxima of %(InputType0)s array elements and a constant and writes the result to the same array.
          default_implementation_template: |
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer;
                x = yepBuiltin_Max_${xPointer.size}s${xPointer.size}s_${xPointer.size}s(x, y);
                *xPointer++ = x;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Max_IV8sS8s_IV8s xPointer, y, YepSize length
            - declaration: yepCore_Max_IV8uS8u_IV8u xPointer, y, YepSize length
            - declaration: yepCore_Max_IV16sS16s_IV16s xPointer, y, YepSize length
            - declaration: yepCore_Max_IV16uS16u_IV16u xPointer, y, YepSize length
            - declaration: yepCore_Max_IV32sS32s_IV32s xPointer, y, YepSize length
            - declaration: yepCore_Max_IV32uS32u_IV32u xPointer, y, YepSize length
            - declaration: yepCore_Max_IV64sS32s_IV64s xPointer, y, YepSize length
            - declaration: yepCore_Max_IV64uS32u_IV64u xPointer, y, YepSize length
            - declaration: yepCore_Max_IV32fS32f_IV32f xPointer, y, YepSize length
            - declaration: yepCore_Max_IV64fS64f_IV64f xPointer, y, YepSize length

    - operation: MinMax
      function_groups:

        - c_documentation: |
          java_documentation: |
          default_implementation_template: |
            ${minimumPointer.arg_type} minimum = *vPointer++;
            ${maximumPointer.arg_type} maximum = minimum;
            while (--length != 0) {
                const Yep${vPointer.size}s v = *vPointer++;
                maximum = yepBuiltin_Max_${vPointer.size}s${vPointer.size}s_${vPointer.size}s(v, maximum);
                minimum = yepBuiltin_Min_${vPointer.size}s${vPointer.size}s_${vPointer.size}s(v, minimum);
            }
            *minimumPointer = minimum;
            *maximumPointer = maximum;
            return YepStatusOk;
          group:
            - declaration: yepCore_MinMax_V8s_S8sS8s vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V8u_S8uS8u vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V16s_S16sS16s vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V16u_S16uS16u vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V32s_S32sS32s vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V32u_S32uS32u vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V64s_S64sS64s vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V64u_S64uS64u vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V32f_S32fS32f vPointer, minimumPointer, maximumPointer, YepSize length
            - declaration: yepCore_MinMax_V64f_S64fS64f vPointer, minimumPointer, maximumPointer, YepSize length
    - operation: Sum
      function_groups:

        - c_documentation: |
            @brief	Computes the sum of %(InputType0)s array elements.
            @param[in]	v	Pointer to the array of elements which will be summed up.
            @param[out]	sum	Pointer to the variable where the sum will be stored.
            @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum will be 0.
          java_documentation: |
            @brief	Computes the sum of %(InputType0)s array elements.
          default_implementation_template: |
            ${sumPointer.arg_type} sum = ${sumPointer.arg_type}(0);
            while (length-- != 0) {
                ${vPointer.arg_type} v = *vPointer++;
                sum += v;
            }
            *sumPointer = sum;
            return YepStatusOk;
          group:
            - declaration: yepCore_Sum_V32f_S32f vPointer, sumPointer, YepSize length
            - declaration: yepCore_Sum_V64f_S64f vPointer, sumPointer, YepSize length
    - operation: SumAbs
      function_groups:

        - c_documentation: |
            @brief	Computes the sum of absolute values of %(InputType0)s array elements.
            @param[in]	v	Pointer to the array of elements whose absolute values will be summed up.
            @param[out]	sumAbs	Pointer to the variable where the sum of absolute values will be stored.
            @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum will be 0.
          java_documentation: |
            @brief	Computes the sum of absolute values of %(InputType0)s array elements.
          default_implementation_template: |
            ${sumAbsPointer.arg_type} sumAbs = ${sumAbsPointer.arg_type}(0);
            while (length-- != 0) {
                ${vPointer.arg_type} v = *vPointer++;
                sumAbs += yepBuiltin_Abs_${vPointer.size}f_${sumAbsPointer.size}f(v);
            }
            *sumAbsPointer = sumAbs;
            return YepStatusOk;
          group:
            - declaration: yepCore_SumAbs_V32f_S32f vPointer, sumAbsPointer, YepSize length
            - declaration: yepCore_SumAbs_V64f_S64f vPointer, sumAbsPointer, YepSize length

    - operation: SumSquares
      function_groups:
        - c_documentation: |
            @brief	Computes the sum of squares of %(InputType0)s array elements.
            @param[in]	v	Pointer to the array of elements which will be squared (without write-back) and summed up.
            @param[out]	sumSquares	Pointer to the variable where the sum of squares will be stored.
            @param[in]	length	Length of the array specified by @a v. If @a length is zero, the computed sum of squares will be 0.
          java_documentation: |
            @brief	Computes the sum of squares of %(InputType0)s array elements.
          default_implementation_template: |
            ${sumSquaresPointer.arg_type} sumSquares = Yep${vPointer.size}f(0);
            while (length-- != 0) {
                ${vPointer.arg_type} v = *vPointer++;
                sumSquares += v * v;
            }
            *sumSquaresPointer = sumSquares;
            return YepStatusOk;
          group:
            - declaration: yepCore_SumSquares_V32f_S32f vPointer, sumSquaresPointer, YepSize length
            - declaration: yepCore_SumSquares_V64f_S64f vPointer, sumSquaresPointer, YepSize length
    - operation: DotProduct
      function_groups:
        - c_documentation: |
            @brief	Computes the dot product of two vectors of %(InputType0)s elements.
            @param[in]	x	Pointer to the first vector of elements.
            @param[in]	y	Pointer to the second vector of elements.
            @param[out]	dotProduct	Pointer to the variable where the dot product value will be stored.
            @param[in]	length	Length of the vectors specified by @a x and @a y.
          java_documentation: |
            @brief	Computes the dot product of two vectors of %(InputType0)s elements.
          default_implementation_template: |
            ${dotProductPointer.arg_type} dotProduct = Yep${dotProductPointer.size}s(0);
            while (length-- != 0) {
                ${xPointer.arg_type} x = *xPointer++;
                ${yPointer.arg_type} y = *yPointer++;
                dotProduct += x * y;
            }
            *dotProductPointer = dotProduct;
            return YepStatusOk;
          group:
            - declaration: yepCore_DotProduct_V32fV32f_S32f xPointer, yPointer, dotProductPointer, YepSize length
            - declaration: yepCore_DotProduct_V64fV64f_S64f xPointer, yPointer, dotProductPointer, YepSize length
    - operation: Gather
      function_groups:
        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                const YepSize index = YepSize(*indexPointer++);
                ${sourcePointer.arg_type} element = sourcePointer[index];
                *destinationPointer++ = element;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_Gather_V8uV8u_V8u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V8uV16u_V8u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V8uV32u_V8u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V8uV64u_V8u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V16uV8u_V16u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V16uV16u_V16u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V16uV32u_V16u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V16uV64u_V16u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V32uV8u_V32u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V32uV16u_V32u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V32uV32u_V32u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V32uV64u_V32u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V64uV8u_V64u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V64uV16u_V64u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V64uV32u_V64u sourcePointer, indexPointer, destinationPointer, YepSize length
            - declaration: yepCore_Gather_V64uV64u_V64u sourcePointer, indexPointer, destinationPointer, YepSize length
    - operation: ScatterIncrement
      function_groups:
        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                const YepSize index = YepSize(*indexPointer++);
                basePointer[index] += 1;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_ScatterIncrement_IV8uV8u_IV8u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV16uV8u_IV16u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV32uV8u_IV32u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV64uV8u_IV64u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV8uV16u_IV8u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV16uV16u_IV16u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV32uV16u_IV32u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV64uV16u_IV64u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV8uV32u_IV8u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV16uV32u_IV16u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV32uV32u_IV32u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV64uV32u_IV64u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV8uV64u_IV8u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV16uV64u_IV16u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV32uV64u_IV32u basePointer, indexPointer, YepSize length
            - declaration: yepCore_ScatterIncrement_IV64uV64u_IV64u basePointer, indexPointer, YepSize length
    - operation: ScatterAdd
      function_groups:
        - c_documentation: |
            None
          java_documentation: |
            None
          default_implementation_template: |
            while (length-- != 0) {
                ${weightPointer.arg_type} weight = *weightPointer++;
                const YepSize index = YepSize(*indexPointer++);
                basePointer[index] += weight;
            }
            return YepStatusOk;
          group:
            - declaration: yepCore_ScatterAdd_IV8uV8uV8u_IV8u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV8uV8u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV8uV16u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV8uV8u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV8uV16u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV8uV32u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV8uV8u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV8uV16u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV8uV32u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV8uV64u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV8uV16uV8u_IV8u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV16uV8u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV16uV16u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV16uV8u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV16uV16u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV16uV32u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV16uV8u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV16uV16u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV16uV32u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV16uV64u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV8uV32uV8u_IV8u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV32uV8u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV32uV16u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV32uV8u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV32uV16u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV32uV32u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV32uV8u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV32uV16u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV32uV32u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV32uV64u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV8uV64uV8u_IV8u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV64uV8u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV16uV64uV16u_IV16u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV64uV8u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV64uV16u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV32uV64uV32u_IV32u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV64uV8u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV64uV16u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV64uV32u_IV64u basePointer, indexPointer, weightPointer, YepSize length
            - declaration: yepCore_ScatterAdd_IV64uV64uV64u_IV64u basePointer, indexPointer, weightPointer, YepSize length
