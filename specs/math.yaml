module: math

functions:
    - operation: Log
      function_groups:
          - c_documentation: |
                @brief	Computes natural logarithm on an array of %(InputType0)s elements.
                @param[in]	x	Pointer to the array of elements on which logarithm will be computed.
                @param[out]	y	Pointer the array where the computed logarithms will be stored.
                @param[in]	length	Length of the arrays specified by @a x and @a y.
            java_documentation: |
                @brief	Computes natural logarithm on %(InputType0)s elements.
                @param[in]	xArray	Input array.
                @param[in]   xOffset Offset of the first element in @a xArray.
                @param[out]	yArray	Output array.
                @param[in]   yOffset Offset of the first element in @a yArray.
                @param[in]	length	The length of the subarrays to be used in computation.
            default_implementation_template: |
                while (length-- != 0) {
                    ${xPointer.arg_type} x = *xPointer++;
                    ${yPointer.arg_type} y = yepBuiltin_Log_${xPointer.size}f_${yPointer.size}f(x);
                    *yPointer++ = y;
                }
                return YepStatusOk;
            group:
                - declaration: yepMath_Log_V64f_V64f xPointer, yPointer, YepSize length
    - operation: Exp
      function_groups:
          - c_documentation: |
                @brief	Computes base-e exponent on an array of %(InputType0)s elements.
                @param[in]	x	Pointer to the array of elements on which exponent will be computed.
                @param[out]	y	Pointer the array where the computed exponents will be stored.
                @param[in]	length	Length of the arrays specified by @a x and @a y.
            java_documentation: |
                @brief	Computes exponent on %(InputType0)s elements.
                @param[in]	xArray	Input array.
                @param[in]   xOffset Offset of the first element in @a xArray.
                @param[out]	yArray	Output array.
                @param[in]   yOffset Offset of the first element in @a yArray.
                @param[in]	length	Length of the subarrays to be used in computation.
            default_implementation_template: |
                while (length-- != 0) {
                    ${xPointer.arg_type} x = *xPointer++;
                    ${yPointer.arg_type} y = yepBuiltin_Exp_${xPointer.size}f_${yPointer.size}f(x);
                    *yPointer++ = y;
                }
                return YepStatusOk;
            group:
                - declaration: yepMath_Exp_V64f_V64f xPointer, yPointer, YepSize length
    - operation: Sin
      function_groups:
          - c_documentation: |
                @brief	Computes sine on an array of %(InputType0)s elements.
                @param[in]	x	Pointer to the array of elements on which sine will be computed.
                @param[out]	y	Pointer the array where the computed sines will be stored.
                @param[in]	length	Length of the arrays specified by @a x and @a y.
            java_documentation: |
                @brief	Computes sine on %(InputType0)s elements.
                @param[in]	xArray	Input array.
                @param[in]   xOffset Offset of the first element in @a xArray.
                @param[out]	yArray	Output array.
                @param[in]   yOffset Offset of the first element in @a yArray.
                @param[in]	length	The length of the subarrays to be used in computation.
            default_implementation_template: |
                while (length-- != 0) {
                    ${xPointer.arg_type} x = *xPointer++;
                    ${yPointer.arg_type} y = yepBuiltin_Sin_${xPointer.size}f_${yPointer.size}f(x);
                    *yPointer++ = y;
                }
                return YepStatusOk;
            group:
                - declaration: yepMath_Sin_V64f_V64f xPointer, yPointer, YepSize length
    - operation: Cos
      function_groups:
          - c_documentation: |
                @brief	Computes cosine on an array of %(InputType0)s elements.
                @param[in]	x	Pointer to the array of elements on which cosine will be computed.
                @param[out]	y	Pointer the array where the computed cosines will be stored.
                @param[in]	length	Length of the arrays specified by @a x and @a y.
            java_documentation: |
                @brief	Computes cosine on %(InputType0)s elements.
                @param[in]	xArray	Input array.
                @param[in]   xOffset Offset of the first element in @a xArray.
                @param[out]	yArray	Output array.
                @param[in]   yOffset Offset of the first element in @a yArray.
                @param[in]	length	The length of the subarrays to be used in computation.
            default_implementation_template: |
                while (length-- != 0) {
                    ${xPointer.arg_type} x = *xPointer++;
                    ${yPointer.arg_type} y = yepBuiltin_Cos_${xPointer.size}f_${yPointer.size}f(x);
                    *yPointer++ = y;
                }
                return YepStatusOk;
            group:
                - declaration: yepMath_Cos_V64f_V64f xPointer, yPointer, YepSize length
    - operation: Tan
      function_groups:
          - c_documentation: |
                @brief	Computes tangent on an array of %(InputType0)s elements.
                @param[in]	x	Pointer to the array of elements on which tangent will be computed.
                @param[out]	y	Pointer the array where the computed tangents will be stored.
                @param[in]	length	Length of the arrays specified by @a x and @a y.
            java_documentation: |
                @brief	Computes tangent on %(InputType0)s elements.
                @param[in]	xArray	Input array.
                @param[in]   xOffset Offset of the first element in @a xArray.
                @param[out]	yArray	Output array.
                @param[in]   yOffset Offset of the first element in @a yArray.
                @param[in]	length	The length of the slices of @a xArray and @a yArray to use in computation.
            default_implementation_template: |
                while (length-- != 0) {
                    ${xPointer.arg_type} x = *xPointer++;
                    ${yPointer.arg_type} y = yepBuiltin_Tan_${xPointer.size}f_${yPointer.size}f(x);
                    *yPointer++ = y;
                }
                return YepStatusOk;
            group:
                - declaration: yepMath_Tan_V64f_V64f xPointer, yPointer, YepSize length
    - operation: EvaluatePolynomial
      function_groups:
          - c_documentation: |
                @brief	Evaluates polynomial with %(InputType0)s coefficients on an array of %(InputType0)s elements.
                @param[in]	x	Pointer to the array of elements on which the polynomial will be evaluated.
                @param[in]	coef	Pointer to the array of polynomial coefficients.
                @param[out]	y	Pointer the array where the result of polynomial evaluation will be stored.
                @param[in]	coefCount	Number of polynomial coefficients. Should equal the polynomial degree plus one.
                @param[in]	length	Length of the arrays specified by @a x and @a y.
            java_documentation: |
                @brief	Evaluates polynomial with %(InputType0)s coefficients on an array of %(InputType0)s elements.
                @param[in]	xArray	Array of elements on which the polynomial will be evaluated.
                @param[in]   xOffset Offset of the first element in @a xArray.
                @param[in]	coefArray	Array of polynomial coefficients.
                @param[in]	coefOffset	Offset of the first element in @a yArray.
                @param[out]	yArray	Array where the result of polynomial evaluation will be stored.
                @param[in]   yOffset Offset of the first element in @a yArray.
                @param[in]	coefCount	The length of the slice of @a coef to be used in computation.
                @param[in]	length	The length of the slice of @a xArray and @a yArray to use in computation.
            default_implementation_template: |
                if YEP_UNLIKELY(coefCount == 0) {
                    return YepStatusInvalidArgument;
                }
                while (length-- != 0) {
                    ${xPointer.arg_type} x = *xPointer++;
                    ${yPointer.arg_type} y = coefPointer[coefCount - 1];
                    for (YepSize coefIndex = coefCount - 1; coefIndex != 0; coefIndex--) {
                        ${coefPointer.arg_type} coef = coefPointer[coefIndex - 1];
                        y = yepBuiltin_MultiplyAdd_${xPointer.size}f${coefPointer.size}f${xPointer.size}f_${yPointer.size}f(y, x, coef);
                    }
                    *yPointer++ = y;
                }
                return YepStatusOk;
            group:
                - declaration: yepMath_EvaluatePolynomial_V32fV32f_V32f xPointer, coefPointer, yPointer, YepSize coefCount, YepSize length
                - declaration: yepMath_EvaluatePolynomial_V64fV64f_V64f xPointer, coefPointer, yPointer, YepSize coefCount, YepSize length
