/**

@mainpage Yeppp! library documentation for C# programmers

@section Introduction	Introduction

Yeppp! is a high-performance SIMD-optimized mathematical library for x86, ARM, PowerPC, and MIPS processors on Windows, Android, Mac OS X, and GNU/Linux systems.
Yeppp! functions are presented in several versions with optimizations for different processor microarchitectures.
During initialization @Yeppp library detects the processor it is running on, and chooses the optimal function implementations.

Additionally, the library provides information about the CPU, such as processor vendor and microarchitecture,
and an OS- and hardware-independent interface to processor cycle counters, and high-resolution timers.

@section FileStructure	File structure

Releases of @Yeppp library contain the following files relevant to C# programming:

<table>
	<tr><th>Location</th><th>Description</th></tr>
	<tr><td>binaries/windows/amd64/</td><td>Pre-built @Yeppp DLL and debug information files for x64 (64-bit) Windows</td></tr>
	<tr><td>binaries/windows/x86/</td><td>Pre-built @Yeppp DLL and debug information files for x86 (32-bit) Windows</td></tr>
	<tr><td>binaries/linux/i586/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on x86 architecture</td></tr>
	<tr><td>binaries/linux/x86_64/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on x86-64 (aka AMD64, x64, or Intel64) architecture</td></tr>
	<tr><td>binaries/linux/armel/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on ARM architecture with armel ABI (ARM EABI Little-Endian Soft-Float)</td></tr>
	<tr><td>binaries/linux/armhf/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on ARM architecture with armhf ABI (ARM EABI Little-Endian Hard-Float)</td></tr>
	<tr><td>binaries/linux/ppc64/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on PowerPC 64 architecture</td></tr>
	<tr><td>binaries/macosx/x86/</td><td>Pre-built @Yeppp dynamic library and debug symbols for Mac OS X on x86 architecture</td></tr>
	<tr><td>binaries/macosx/x86_64/</td><td>Pre-built @Yeppp dynamic library and debug symbols for Mac OS X on x86-64 (aka AMD64, x64, or Intel64) architecture</td></tr>
	<tr><td>binaries/clr-2.0/</td><td>Pre-built @Yeppp bindings for CLR 2.0 (.Net- and Mono-compatible). Includes managed platform-independent DLL and xml documentation</td></tr>
	<tr><td>bindings/clr/sources-csharp/</td><td>Source code for @Yeppp CLR bindings</td></tr>
	<tr><td>examples/csharp/</td><td>Examples of calling @Yeppp functions in C# code</td></tr>
	<tr><td>docs/cs/</td><td>@Yeppp documentation for C# programmers</td></tr>
	<tr><td>SetVars.cmd</td><td>Windows batch script to setup environment variables for @Yeppp</td></tr>
	<tr><td>set-vars.sh</td><td>POSIX shell script to setup environemnt variables for @Yeppp. Compatible with bash/dash/ksh/zsh on Linux and Mac OS X.</td></tr>
</table>

@section GettingStarted	Getting Started

@subsection GettingStartedVisualStudio	Using Yeppp! with Visual Studio

Download the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>. On Windows we recommend that you use the MSI installer for Yeppp! SDK. The installer will install the library components, and also set YEPROOT environment variable.

Open the Visual C# project where you want to use @Yeppp. Choose Project->Add Reference in the main menu. Add Reference diallog will appear on the screen.

In the Add Reference diallog switch to "Browse" tab and specify the path to @c yeppp-cli.dll file in the directory <tt>binaries/clr-2.0/</tt> in @Yeppp tree. @image html visual-studio-add-reference.png

Additionally you need to let .Net framework know where to find @Yeppp DLL. The easy way to achieve it is to copy yeppp.dll (which should match your target platform) to your output directory.

Now you are ready to use @Yeppp

@example Entropy.cs
This example shows how to use @Yeppp library to compute the entropy of a distribution given by its probabilities:

@example Polynomial.cs
This example demonstrates the use of @Yeppp library to evaluate a polynomial on an array:

@example CpuInfo.cs
This example shows how to use @Yeppp library to get information about processor and supported instruction extensions:

@example SystemTimer.cs
This example shows how to use @Yeppp library to do cross-platform measurements of execution time using high-frequency system timer:

@example CpuCycles.cs
This example shows how to use @Yeppp library to measure the execution time in CPU cycles:

*/
