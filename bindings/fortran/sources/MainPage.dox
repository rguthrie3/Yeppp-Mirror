/**

@mainpage Yeppp! library documentation for FORTRAN programmers

@section Introduction	Introduction

Yeppp! is a high-performance SIMD-optimized mathematical library for x86, ARM, PowerPC, and MIPS processors on Windows, Android, Mac OS X, and GNU/Linux systems.
Yeppp! functions are presented in several versions with optimizations for different processor microarchitectures.
During initialization @Yeppp library detects the processor it is running on, and chooses the optimal function implementations.

Additionally, the library provides information about the CPU, such as processor vendor and microarchitecture,
and an OS- and hardware-independent interface to processor cycle counters, and high-resolution timers.

@section FileStructure	File structure

Releases of @Yeppp library contain the following files relevant to FORTRAN programming:

<table>
	<tr><th>Location</th><th>Description</th></tr>
	<tr><td>binaries/linux/i586/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on x86 architecture</td></tr>
	<tr><td>binaries/linux/x86_64/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on x86-64 (aka AMD64, x64, or Intel64) architecture</td></tr>
	<tr><td>binaries/linux/k1om/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on k1om (Xeon Phi) architecture</td></tr>
	<tr><td>binaries/linux/armel/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on ARM architecture with armel ABI (ARM EABI Little-Endian Soft-Float)</td></tr>
	<tr><td>binaries/linux/armhf/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on ARM architecture with armhf ABI (ARM EABI Little-Endian Hard-Float)</td></tr>
	<tr><td>binaries/linux/ppc64/</td><td>Pre-built @Yeppp shared object and debug symbols for GNU/Linux on PowerPC 64 architecture</td></tr>
	<tr><td>binaries/linux/bgq/</td><td>Pre-built @Yeppp shared object and debug symbols for Blue Gene/Q compute nodes</td></tr>
	<tr><td>binaries/macosx/x86/</td><td>Pre-built @Yeppp dynamic library and debug symbols for Mac OS X on x86 architecture</td></tr>
	<tr><td>binaries/macosx/x86_64/</td><td>Pre-built @Yeppp dynamic library and debug symbols for Mac OS X on x86-64 (aka AMD64, x64, or Intel64) architecture</td></tr>
	<tr><td>bindings/fortran/sources/</td><td>@Yeppp bindings for FORTRAN</td></tr>
	<tr><td>examples/fortran/</td><td>Examples of calling @Yeppp functions in FORTRAN code</td></tr>
	<tr><td>docs/fortran/</td><td>@Yeppp documentation for FORTRAN programmers</td></tr>
	<tr><td>set-vars.sh</td><td>POSIX shell script to setup environemnt variables for @Yeppp. Compatible with bash/dash/ksh/zsh on Linux and Mac OS X.</td></tr>
</table>

@section GettingStarted	Getting Started

@subsection GettingStartedUnix	Using Yeppp! with command-line tools on Unix

Download the recent release of @Yeppp from <a href="http://www.yeppp.info/downloads.html">the official website</a>.

Open a terminal window where you plan to build your program. With @Yeppp we provide a shell script to set up environment variables. Navigate to @Yeppp directory and execute command
\code{.bash}
source set-vars.sh <arch>
\endcode
If your shell does not support \c source command, use the equivalent command
\code{.bash}
. set-vars.sh <arch>
\endcode
<tt>&lt;arch&gt;</tt> specifies the architecture/ABI for which you want to compile your program. The following values are accepted:
<ul>
	<li>\c x86 to set variables for x86 (32-bit x86) target</li>
	<li>\c x86_64 to set variables for x86-64 (64-bit x86) target</li>
	<li>\c k1om to set variables for Xeon Phi target (Linux only)</li>
	<li>\c armel to set variables for ARM Soft-Float EABI target (Linux only)</li>
	<li>\c armhf to set variables for ARM Hard-Float EABI target (Linux only)</li>
	<li>\c ppc64 to set variables for PowerPC 64 target (Linux only)</li>
	<li>\c bgq to set variables for Blue Gene/Q target (Linux only)</li>
</ul>
You can also omit the &lt;arch&gt; parameter. This case the setup script will auto-detect the host architecture and set the environment variable accordingly.

The set-vars.sh script sets environment variables to let the dynamic linker find @Yeppp when you execute a program which makes use of this library. Additionally, the script sets environment variable $YEPROOT to contain the path to @Yeppp installation directory, and $YEPBINARIES variable to contain the path to platform-specific @Yeppp binaries, and $YEPPLATFORM variable to contain the internal @Yeppp name of the platform (e.g. x64-linux-sysv-default).

Now navigate to <tt>$YEPROOT/bindings/fortran</tt>. Run the command
\code{.bash}
make FC=<fortran-compiler>
\endcode
where @c FC is the fortran compiler you plan to use, and you may use @c FFLAGS to specify additional parameters. This will precompile @Yeppp interface modules to <tt>$YEPROOT/bindigns/fortran/modules/$YEPPLATFORM-$FCNAME</tt> where @c $FCNAME is the filename of the FORTRAN compiler specified in @c FC variable (e.g. for <tt>FC=/usr/bin/gfortran-4.8</tt> we have <tt>FCNAME=gfortran-4.8</tt>).

To build your FORTRAN project with @Yeppp use additional compilation flags (FFLAGS) <tt>-I$YEPROOT/bindings/fortran/modules/$YEPPLATFORM-$FCNAME/</tt> and additional linker flag <tt>-lyeppp</tt>, e.g.
	\code{.bash}
	gfortran HelloWorld.f90 -o HelloWorld -I$YEPROOT/bindings/fortran/modules/$YEPPLATFORM-gfortran/ -lyeppp
	\endcode
and you can use @Yeppp in your codes!

@example Entropy.f90
This example shows how to use @Yeppp library to compute the entropy of a distribution given by its probabilities:

@example Polynomial.f90
This example demonstrates the use of @Yeppp library to evaluate a polynomial on an array:

*/
